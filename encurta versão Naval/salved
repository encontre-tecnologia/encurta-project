<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Encurta v1.0 - Otimizador de Rotas</title>
    
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://unpkg.com/lucide@latest"></script>
    
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBj5jmi5RbRsB8Lluysuu0jNvkPzgDw8DE&libraries=places" defer></script>

    <style>
        /* ============== ESTILOS GERAIS ============== */
        html, body {
            height: 100%; margin: 0; padding: 0; overflow: hidden;
            font-family: 'Inter', sans-serif; background-color: #111827;
        }
        #map {
            height: 100%; width: 100%; position: absolute;
            top: 0; left: 0; z-index: 1;
        }
        
       /* ============== PAINEL DE CONTROLE FLUTUANTE (MODIFICADO) ============== */
.control-panel {
    position: absolute;
    top: 4.7rem; /* <-- MODIFICADO: Posicionado a partir do topo */
    left: 50%;
    transform: translateX(-50%);
    width: calc(100% - 2rem);
    max-width: 500px; /* Adicionado um max-width para telas maiores */
    background-color: rgba(17, 24, 39, 0.9);
    backdrop-filter: blur(10px);
    border-radius: 1rem;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.4);
    z-index: 10;
    padding: 1.5rem;
    border: 1px solid rgba(255, 255, 255, 0.337);
    transition: all 0.3s ease-in-out;
    max-height: 85vh; /* Adicionado para evitar que o painel fique muito grande */
    overflow-y: auto; /* Adicionado para permitir rolagem se necess√°rio */
}
        /* Estilo da barra de rolagem para o painel */
        .control-panel::-webkit-scrollbar { width: 5px; }
        .control-panel::-webkit-scrollbar-track { background: transparent; }
        .control-panel::-webkit-scrollbar-thumb { background-color: #4b5563; border-radius: 20px; }


        /* ============== INPUTS E BOT√ïES CUSTOMIZADOS ============== */
        .custom-input {
            background-color: #374151; border: 1px solid #4b5563;
            color: #f3f4f6; transition: border-color 0.3s, box-shadow 0.3s;
        }
        .custom-input::placeholder { color: #9ca3af; }
        .custom-input:focus {
            outline: none; border-color: #3b82f6;
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.4);
        }
        .btn {
            display: flex; align-items: center; justify-content: center;
            gap: 0.75rem; font-weight: 600; padding: 0.75rem 1rem;
            border-radius: 0.75rem; transition: all 0.2s ease-in-out;
            cursor: pointer; box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        .btn-primary { background-color: #2563eb; color: white; }
        .btn-primary:hover { background-color: #1d4ed8; transform: translateY(-2px); }
        .btn-secondary { background-color: #4b5563; color: white; }
        .btn-secondary:hover { background-color: #374151; }
        
        /* ============== CAIXA DE RESULTADOS E MENSAGENS ============== */
        #resultado {
            background-color: rgba(31, 41, 55, 0.7); border: 1px solid #4b5563;
            min-height: 80px; padding: 1rem; border-radius: 0.75rem;
            color: #d1d5db; font-size: 0.875rem; line-height: 1.5; overflow-y: auto;
        }
        .message-overlay {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            background-color: rgba(0, 0, 0, 0.7); backdrop-filter: blur(5px);
            z-index: 999; display: flex; align-items: center; justify-content: center;
        }
        .message-box {
            background-color: #1f2937; color: #e5e7eb; padding: 2rem;
            border-radius: 1rem; box-shadow: 0 10px 25px rgba(0, 0, 0, 0.4);
            text-align: center; width: 90%; max-width: 400px;
            border: 1px solid #4b5563;
        }
        /* ============== ANIMA√á√ïES ============== */
        .loader {
            width: 50px; aspect-ratio: 1; border-radius: 50%;
            background: radial-gradient(farthest-side, #3b82f6 94%, #0000) top/8px 8px no-repeat, conic-gradient(#0000 30%, #3b82f6);
            -webkit-mask: radial-gradient(farthest-side, #0000 calc(100% - 8px), #000 0);
            animation: l13 1s infinite linear; margin: 1rem auto;
        }
        @keyframes l13{ 100%{transform: rotate(1turn)} }
        .listening { color: #3b82f6; animation: pulse 1.5s infinite; }
        @keyframes pulse {
            0%, 100% { transform: scale(1); opacity: 1; }
            50% { transform: scale(1.2); opacity: 0.7; }
        }
    </style>
</head>
<body>

    <div id="map"></div>

    <div class="control-panel">
        <div class="flex flex-col space-y-4">
            <div class="flex justify-between items-center w-full mb-2">
                <h1 class="text-2xl font-bold text-white flex items-baseline gap-2">
                    Encurta
                    <span class="text-xs font-light text-gray-400">v1.0</span>
                </h1>
                <button id="load-route-btn" title="Carregar √∫ltima rota salva" class="btn btn-secondary p-2.5" onclick="loadSavedRoute()">
                    <i data-lucide="history" size="20"></i>
                </button>
            </div>

            <div id="enderecos" class="space-y-3">
                <div class="relative">
                    <i data-lucide="map-pin" class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size="20"></i>
                    <input type="text" id="origem" placeholder="Ponto de Partida" class="w-full p-3 pl-10 rounded-lg custom-input transition duration-200" />
                </div>
                <div id="paradas-container">
                    </div>
            </div>

            <div class="grid grid-cols-2 gap-3">
                <button onclick="adicionarParada()" class="btn btn-secondary">
                    <i data-lucide="plus-circle" size="20"></i> Adicionar Parada
                </button>
                 <button onclick="otimizarRota()" class="btn btn-primary py-3 text-base">
                    <i data-lucide="route" size="20"></i> Otimizar
                </button>
            </div>
           
            <div id="resultado-container" class="pt-2">
                 <div id="localizacao" class="text-sm text-center h-5 mb-2 font-medium"></div>
                 <div id="resultado"></div> </div>
        </div>
    </div>

<script>
    lucide.createIcons();

    let directionsService, distanceMatrixService, placesService;
    let origemLatLng;
    // NOVO: Vari√°veis para guardar a √∫ltima rota calculada
    let lastSuccessfulOrigin = '';
    let lastSuccessfulStops = [];

    function showMessage(message, type = 'info') {
        const existingOverlay = document.querySelector('.message-overlay');
        if (existingOverlay) existingOverlay.remove();
        const overlay = document.createElement('div');
        overlay.className = 'message-overlay';
        const icon = type === 'error'
            ? `<i data-lucide="alert-triangle" class="text-red-400 mx-auto mb-4" size="48"></i>`
            : `<i data-lucide="info" class="text-blue-400 mx-auto mb-4" size="48"></i>`;
        overlay.innerHTML = `<div class="message-box">${icon}<p class="text-lg mb-6">${message}</p><button onclick="this.parentElement.parentElement.remove()" class="btn btn-primary px-8">OK</button></div>`;
        document.body.appendChild(overlay);
        lucide.createIcons();
    }

    function initServices() {
        const mapElement = document.getElementById('map');
        directionsService = new google.maps.DirectionsService();
        distanceMatrixService = new google.maps.DistanceMatrixService();
        placesService = new google.maps.places.PlacesService(mapElement);
        pegarLocalizacao(true);
        adicionarParada(); // Adiciona o primeiro campo de parada ao iniciar
    }
    
    function pegarLocalizacao(silent = false) {
        const localizacaoDiv = document.getElementById("localizacao");
        localizacaoDiv.innerHTML = `<span class="text-yellow-400">Obtendo localiza√ß√£o...</span>`;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    origemLatLng = { lat: position.coords.latitude, lng: position.coords.longitude };
                    document.getElementById("origem").value = "Minha Localiza√ß√£o Atual";
                    localizacaoDiv.innerHTML = `<span class="text-green-400">üìç Ponto de partida definido!</span>`;
                },
                () => {
                    localizacaoDiv.innerHTML = ``;
                    if (!silent) showMessage("N√£o foi poss√≠vel obter sua localiza√ß√£o.", 'error');
                }
            );
        } else {
             localizacaoDiv.innerHTML = ``;
            if (!silent) showMessage("Geolocaliza√ß√£o n√£o √© suportada.", 'error');
        }
    }

    // MODIFICADO: Aceita um valor inicial para o campo
    function adicionarParada(value = '') {
        const container = document.getElementById('paradas-container');
        const novoInputDiv = document.createElement('div');
        novoInputDiv.className = 'relative mt-3';
        novoInputDiv.innerHTML = `
            <i data-lucide="flag" class="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" size="20"></i>
            <input type="text" placeholder="Digite uma parada" class="w-full p-3 pl-10 pr-10 rounded-lg custom-input transition duration-200 parada-input" value="${value}">
            <i data-lucide="mic" class="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 cursor-pointer hover:text-blue-400 transition" size="20" onclick="iniciarReconhecimentoDeVoz(this)"></i>`;
        container.appendChild(novoInputDiv);
        lucide.createIcons();
    }
    
    function geocodeAddress(addressQuery) {
        return new Promise((resolve, reject) => {
            const request = { query: addressQuery, fields: ['name', 'formatted_address', 'geometry'], };
            placesService.findPlaceFromQuery(request, (results, status) => {
                if (status === google.maps.places.PlacesServiceStatus.OK && results && results[0]) {
                    if (results[0].geometry && results[0].geometry.location) resolve(results[0]);
                    else reject(`Endere√ßo '${addressQuery}' n√£o possui coordenadas.`);
                } else reject(`N√£o foi poss√≠vel encontrar: "${addressQuery}".`);
            });
        });
    }

    async function calculateNearestNeighborRoute(origin, stops) {
        let remainingStops = [...stops], orderedRoute = [], routeLegs = [], currentPoint = origin.geometry.location;
        while (remainingStops.length > 0) {
            const destinations = remainingStops.map(stop => stop.geometry.location);
            const matrixRequest = { origins: [currentPoint], destinations: destinations, travelMode: google.maps.TravelMode.DRIVING, };
            const response = await new Promise((resolve, reject) => {
                distanceMatrixService.getDistanceMatrix(matrixRequest, (resp, status) => (status === 'OK') ? resolve(resp) : reject(`Erro na matriz: ${status}`));
            });
            const results = response.rows[0].elements;
            let closestStopIndex = -1, minDuration = Infinity;
            for (let i = 0; i < results.length; i++) {
                if (results[i].status === 'OK' && results[i].duration.value < minDuration) {
                    minDuration = results[i].duration.value;
                    closestStopIndex = i;
                }
            }
            if (closestStopIndex === -1) throw new Error("N√£o foi poss√≠vel calcular a rota entre os pontos.");
            const nextStop = remainingStops[closestStopIndex];
            orderedRoute.push(nextStop); routeLegs.push(results[closestStopIndex]); currentPoint = nextStop.geometry.location;
            remainingStops.splice(closestStopIndex, 1);
        }
        return { orderedRoute, routeLegs };
    }

    async function otimizarRota() {
        const origemInput = document.getElementById('origem').value.trim();
        const paradas = Array.from(document.querySelectorAll('.parada-input')).map(i => i.value.trim()).filter(Boolean);

        if ((origemInput === "Minha Localiza√ß√£o Atual" && !origemLatLng) || !origemInput) return showMessage('Defina um ponto de partida.', 'error');
        if (paradas.length === 0) return showMessage('Adicione pelo menos uma parada.', 'error');

        const resultadoDiv = document.getElementById('resultado');
        resultadoDiv.innerHTML = '<div class="loader"></div><p class="text-center text-blue-300">Validando endere√ßos e otimizando...</p>';

        try {
            // Salva os inputs para a fun√ß√£o "Salvar"
            lastSuccessfulOrigin = origemInput;
            lastSuccessfulStops = [...paradas];

            const geocodedStops = await Promise.all(paradas.map(p => geocodeAddress(p)));
            const originPoint = (origemInput === "Minha Localiza√ß√£o Atual")
                ? { name: "Sua Localiza√ß√£o", formatted_address: "Minha Localiza√ß√£o Atual", geometry: { location: origemLatLng } }
                : await geocodeAddress(origemInput);

            const { orderedRoute, routeLegs } = await calculateNearestNeighborRoute(originPoint, geocodedStops);

            let totalDistance = 0, totalDuration = 0;
            let outputHtml = `<p class="font-bold text-white mb-2">Rota Otimizada:</p><ol class="list-decimal list-inside space-y-1.5">`;
            outputHtml += `<li><strong>Partida:</strong> ${originPoint.formatted_address.split(',')[0]}</li>`;

            routeLegs.forEach((leg, index) => {
                totalDistance += leg.distance.value;
                totalDuration += leg.duration.value;
                const stopName = orderedRoute[index].name || orderedRoute[index].formatted_address.split(',')[0];
                outputHtml += `<li>${stopName} <span class="text-gray-400 text-xs">(${leg.distance.text})</span></li>`;
            });
            
            outputHtml += `</ol><div class="mt-3 pt-3 border-t border-gray-600 text-center">
                <p class="font-semibold text-white">Dist√¢ncia: ${(totalDistance / 1000).toFixed(2)} km | Tempo: ${Math.round(totalDuration / 60)} min</p>
            </div>
            <div class="mt-4">
                <button onclick="saveCurrentRoute()" class="btn btn-secondary w-full">
                    <i data-lucide="save" size="20"></i> Salvar Rota
                </button>
            </div>`;
            resultadoDiv.innerHTML = outputHtml;
            lucide.createIcons();

        } catch (error) {
            resultadoDiv.innerHTML = '';
            showMessage(error.toString(), 'error');
        }
    }
    
    /** NOVO: Fun√ß√£o para salvar a rota no localStorage */
    function saveCurrentRoute() {
        if (!lastSuccessfulOrigin || lastSuccessfulStops.length === 0) {
            return showMessage('N√£o h√° rota para salvar.', 'error');
        }
        const routeToSave = {
            origin: lastSuccessfulOrigin,
            stops: lastSuccessfulStops,
        };
        localStorage.setItem('encurtaSavedRoute', JSON.stringify(routeToSave));
        showMessage('Rota salva com sucesso!', 'info');
    }
    
    /** NOVO: Fun√ß√£o para carregar a rota do localStorage */
    function loadSavedRoute() {
        const savedData = localStorage.getItem('encurtaSavedRoute');
        if (!savedData) {
            return showMessage('Nenhuma rota salva foi encontrada.', 'info');
        }
        const route = JSON.parse(savedData);
        
        // Preenche a origem
        document.getElementById('origem').value = route.origin;

        // Limpa e preenche as paradas
        const container = document.getElementById('paradas-container');
        container.innerHTML = ''; // Limpa campos existentes
        route.stops.forEach(stopValue => {
            adicionarParada(stopValue);
        });
        
        showMessage('Rota carregada. Clique em "Otimizar" para calcular.', 'info');
    }

    // --- Fun√ß√µes de reconhecimento de voz (sem altera√ß√µes) ---
    function iniciarReconhecimentoDeVoz(micIconElement) {
        const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
        if (!SpeechRecognition) return showMessage('Reconhecimento de voz n√£o √© suportado.', 'error');
        const r = new SpeechRecognition(), i = micIconElement.previousElementSibling;
        r.lang = 'pt-BR', r.interimResults = !1, r.maxAlternatives = 1;
        r.onstart = () => { micIconElement.classList.add('listening'); i.placeholder = "Ouvindo..."; };
        r.onspeechend = () => { r.stop(); micIconElement.classList.remove('listening'); i.placeholder = "Digite uma parada"; };
        r.onerror = (e) => { micIconElement.classList.remove('listening'); i.placeholder = "Digite uma parada"; e.error == 'no-speech' ? showMessage('Nenhuma fala detectada.', 'info') : showMessage(`Erro: ${e.error}`, 'error'); };
        r.onresult = (e) => { i.value = e.results[0][0].transcript; };
        r.start();
    }

    window.addEventListener("load", () => {
         const checkGoogle = setInterval(() => {
             if (typeof google !== 'undefined' && google.maps && google.maps.places) {
                 clearInterval(checkGoogle);
                 initServices();
             }
         }, 100);
    });
</script>
</body>
</html>
